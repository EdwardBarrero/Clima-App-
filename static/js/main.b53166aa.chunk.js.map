{"version":3,"sources":["components/about/About.jsx","components/card/Card.jsx","components/cards/Cards.jsx","components/ciudad/Ciudad.jsx","asset/image/clima.png","components/searchBar/SearchBar.jsx","components/navbar/Nav.jsx","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["About","className","Card","min","max","name","img","onClose","id","style","textDecoration","to","src","width","height","alt","onClick","Cards","cities","map","c","Ciudad","city","ciudadId","useParams","test","find","parseInt","temp","weather","wind","clouds","latitud","longitud","SearchBar","onSearch","useState","setCity","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","Nav","Logo","span","App","setCities","useEffect","citiesStorage","JSON","parse","window","localStorage","getItem","citiesSaveLocalStorage","setItem","stringify","ciudad","a","fetch","response","json","then","recurso","console","log","undefined","main","Math","round","temp_min","temp_max","icon","speed","all","coord","lat","lon","swal","title","text","button","oldCities","data","path","element","filter","cityId","Boolean","location","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b53166aa.chunk.js","sourcesContent":["import React from 'react'\r\nimport './about.css'\r\n\r\nconst About = () => {\r\n    return (\r\n        <div className=\"prueba\">\r\n            <div className=\"card2 \">\r\n                <div className=\"contentAboutTitle\">\r\n                    <h2 className=\"titleAbout\">ABOUT</h2>\r\n                    <p className=\"descriptionAbout\" >Lorem ipsum dolor sit amet consectetur adipisicing elit. Necessitatibus accusantium at magnam hic itaque officiis tenetur, commodi laudantium fugit rem temporibus dolores provident facilis molestias porro. Animi explicabo quasi veniam? Lorem ipsum dolor sit amet consectetur adipisicing elit. Quidem dolore eius ratione ipsam animi molestiae eligendi! Sunt, laborum perspiciatis voluptas nesciunt quaerat nulla officia unde illo dolor quod, iusto tenetur.</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About\r\n","import { Link } from 'react-router-dom'\r\nimport swal from 'sweetalert'\r\nimport './card.css'\r\n\r\nconst Card = ({ min, max, name, img, onClose, id }) => {\r\n    return (\r\n        <div className=\"container test2\">\r\n            <div className=\"card\">\r\n                <div className=\"content\">\r\n                    <Link style={{ textDecoration: \"none\" }} to={`/ciudad/${id}`} >\r\n                        <img className=\"image\" src={\"http://openweathermap.org/img/wn/\" + img + \"@2x.png\"} width=\"300\" height=\"300\" alt=\"\" />\r\n                        <h3>{name}</h3>\r\n                        <div className=\"contentMinMax\">\r\n                            <div className=\"tituleMinMax\">\r\n                                <h5>Min</h5>\r\n                                <h5>Max</h5>\r\n                            </div>\r\n                            <div className=\"contenidoMinMax\">\r\n                                <p>{min}</p>\r\n                                <p>{max}</p>\r\n                            </div>\r\n                        </div>\r\n                    </Link>\r\n                    <button className=\"btn\" onClick={() => onClose(id)} >Close</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card\r\n","import Card from '../card/Card'\r\n\r\nconst Cards = ({ cities, onClose }) => {\r\n    return (\r\n        <>\r\n            {cities.map(c => <Card\r\n                key={c.id}\r\n                id={c.id}\r\n                max={c.max}\r\n                min={c.min}\r\n                name={c.name}\r\n                img={c.img}\r\n                onClose={() => onClose(c.id)}\r\n            />\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Cards\r\n","import React from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport './ciudad.css'\r\n\r\nexport default function Ciudad({ city }) {\r\n    let { ciudadId } = useParams()\r\n    const test = city.find(c => c.id === parseInt(ciudadId))\r\n    return (\r\n        <div className=\"prueba2\">\r\n            <div className=\"card2 \">\r\n                <div className=\"contentCardTitle\">\r\n                    <h2 className=\"titleCard\">{test.name}</h2>\r\n                    <div className=\"ciudadContent\">\r\n                        <div className=\"ciudadLeft\">\r\n                            <p className=\"descriptionCard\" >Temperatura: {test.temp} ยบC</p>\r\n                            <p className=\"descriptionCard\" >Clima: {test.weather}</p>\r\n                            <p className=\"descriptionCard\" >Viento: {test.wind} km/h</p>\r\n                        </div>\r\n                        <div className=\"ciudadRight\">\r\n                            <p className=\"descriptionCard\" >Cantidad de nubes: {test.clouds}</p>\r\n                            <p className=\"descriptionCard\" >Latitud: {test.latitud}ยบ</p>\r\n                            <p className=\"descriptionCard\" >Longitud: {test.longitud}ยบ</p>\r\n                        </div>\r\n                    </div>\r\n                    <Link style={{ textDecoration: \"none\" }} to=\"/\" >\r\n                        <button className=\"btnCiudad\">Return</button>\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        // <div className=\"container test2\">\r\n        //     <div className=\"card\">\r\n        //         <h2 className=\"henry\">{test.name}</h2>\r\n        //         <div className=\"info\">\r\n        //             <div className=\"descriptionCiudad\" >Temperatura: {test.temp} ยบC</div>\r\n        //             <div className=\"descriptionCiudad\" >Clima: {test.weather}</div>\r\n        //             <div className=\"descriptionCiudad\" >Viento: {test.wind} km/h</div>\r\n        //             <div className=\"descriptionCiudad\" >Cantidad de nubes: {test.clouds}</div>\r\n        //             <div className=\"descriptionCiudad\" >Latitud: {test.latitud}ยบ</div>\r\n        //             <div className=\"descriptionCiudad\" >Longitud: {test.longitud}ยบ</div>\r\n        //         </div>\r\n        //     </div>\r\n        // </div>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/clima.a196e219.png\";","import React, { useState } from 'react'\r\nimport './searchBar.css'\r\n\r\nconst SearchBar = ({ onSearch }) => {\r\n    const [city, setCity] = useState('')\r\n    return (\r\n        <form onSubmit={(e) => {\r\n            e.preventDefault()\r\n            onSearch(city)\r\n            setCity('')\r\n        }} >\r\n            <input className=\"inputSearch\" type=\"text\" placeholder=\" Ciudad...\" value={city} onChange={e => setCity(e.target.value)} />\r\n            <input className=\"btnInput\" type=\"submit\" value=\"Agregar\" />\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default SearchBar\r\n","import { Link } from 'react-router-dom'\r\nimport Logo from '../../asset/image/clima.png'\r\nimport SearchBar from '../searchBar/SearchBar'\r\nimport './nav.css'\r\n\r\nconst Nav = ({ onSearch }) => {\r\n    return (\r\n        <div className=\"navbar navbar-dark top\">\r\n            <div className=\"container-fuild\">\r\n                <Link className=\"navbar-brand link\" to=\"/\" >\r\n                    <img className=\"d-inline-block align-text-top imgTopBar\" width=\"40\" height=\"50\" src={Logo} alt=\"logo\" />\r\n                    <h2 className=\"henry\">Neri Heredia - Weather App</h2>\r\n                </Link>\r\n            </div>\r\n            <div className=\"container-fluid stop\">\r\n                <div className=\"topLeft\">\r\n                    <Link style={{ textDecoration: \"none\" }} to={\"/\"} >\r\n                        <span span className=\"liItems\" >Home</span>\r\n                    </Link>\r\n                    <Link style={{ textDecoration: \"none\" }} to={\"/about\"} >\r\n                        <span className=\"liItems\">About</span>\r\n                    </Link>\r\n                </div>\r\n                <div className=\"topRight\">\r\n                    <SearchBar onSearch={onSearch} />\r\n                </div>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import { useState, useEffect } from 'react';\nimport { Route, Routes } from 'react-router';\nimport About from './components/about/About';\nimport Cards from './components/cards/Cards';\nimport Ciudad from './components/ciudad/Ciudad';\nimport Nav from './components/navbar/Nav';\nimport swal from 'sweetalert';\nconst localStorageKey = 'citieSave';\nconst apiKey = '4ae2636d8dfbdc3044bede63951a019b';\n\nfunction App() {\n    const [cities, setCities] = useState([]);\n\n    const citiesSaveLocalStorage = () => {\n        const citiesStorage = JSON.parse(window.localStorage.getItem(localStorageKey))\n        setCities(citiesStorage)\n    }\n    useEffect(() => {\n        citiesSaveLocalStorage()\n    }, [])\n\n    useEffect(() => {\n        window.localStorage.setItem('citieSave', JSON.stringify(cities))\n    }, [cities])\n\n    const onSearch = async (ciudad) => {\n        //Llamado a la API del clima\n        const response = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}&units=metric`)\n        const data = await response.json()\n            .then((recurso) => {\n                console.log(recurso)\n                if (recurso.main !== undefined) {\n                    const ciudad = {\n                        min: Math.round(recurso.main.temp_min),\n                        max: Math.round(recurso.main.temp_max),\n                        img: recurso.weather[0].icon,\n                        id: recurso.id,\n                        wind: recurso.wind.speed,\n                        temp: recurso.main.temp,\n                        name: recurso.name,\n                        weather: recurso.weather[0].main,\n                        clouds: recurso.clouds.all,\n                        latitud: recurso.coord.lat,\n                        longitud: recurso.coord.lon\n                    };\n                    let filterCities = cities.find(c => c.id === recurso.id)\n                    if (filterCities) {\n                        swal({\n                            title: 'City already created',\n                            text: 'Please enter another city',\n                            icon: 'warning',\n                            button: \"Close\"\n                        })\n                    } else {\n                        setCities(oldCities => [...oldCities, ciudad]);\n                        swal({\n                            title: \"Successful!\",\n                            text: \"City added successfully.\",\n                            icon: \"success\",\n                            button: \"Ok\"\n                        })\n                    }\n                } else {\n                    swal({\n                        title: 'City not found',\n                        text: 'Please enter another city',\n                        icon: 'warning',\n                        button: \"Close\"\n                    });\n                }\n            });\n        return data\n    }\n\n    function onClose(id) {\n        setCities(oldCities => oldCities.filter(cityId => cityId.id !== id))\n    }\n\n    return (\n        <>\n            <Nav onSearch={onSearch} />\n            <Routes>\n                <Route path=\"/\" element={<Cards cities={cities} onClose={onClose} />} />\n                <Route path=\"/about\" element={<About />} />\n                <Route path=\"/ciudad/:ciudadId\" element={<Ciudad city={cities} />} />\n            </Routes>\n        </>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}